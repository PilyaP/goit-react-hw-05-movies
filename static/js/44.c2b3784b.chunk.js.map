{"version":3,"file":"static/js/44.c2b3784b.chunk.js","mappings":"mMAmBA,EAjByB,SAAC,GAAe,IAAbA,EAAY,EAAZA,MACpBC,GAAWC,EAAAA,EAAAA,MAEXC,EAAUH,EAAMI,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OACxB,SAAC,KAAD,CACEC,UAAU,qBAEVC,GAAE,kBAAaH,GACfI,MAAO,CAAEC,KAAMT,GAJjB,UAME,eAAIM,UAAU,qBAAd,SAAoCD,KAJ/BD,EAHiB,IAW1B,OAAO,eAAIE,UAAU,qBAAd,SAAoCJ,GAC5C,C,wKCyCD,EAnDqB,WACnB,OAA8BQ,EAAAA,EAAAA,WAAS,GAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAQF,EAAaG,IAAI,UAE/BC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,mCAAG,oGAEfT,GAAW,GAFI,UAGIU,EAAAA,EAAAA,IAAaJ,GAHjB,OAGTK,EAHS,OAIfT,GAAU,OAAIS,EAAKC,UAJJ,gDAMfC,QAAQC,IAAI,KAAMC,SANH,yBAQff,GAAW,GARI,4EAAH,qDAYF,KAAVM,GAGJG,GACD,GAAE,CAACH,IAQJ,OACE,iBAAKZ,UAAU,gBAAf,WACE,kBAAMsB,SARW,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cACff,EAAgB,CAAEC,MAAOa,EAAKE,SAASC,WAAWC,OACnD,EAIG,WACE,kBACEC,KAAK,OACLC,KAAK,aACLC,aAAa,MACbC,WAAS,EACTC,YAAY,gBACZlC,UAAU,kBAEZ,mBAAQ8B,KAAK,SAAS9B,UAAU,gBAAhC,SAAgD,cAIjDK,GAAU,SAAC8B,EAAA,EAAD,KAAa,SAAC,IAAD,CAAc1C,MAAOc,MAGlD,EC7CD,EARe,WACb,OACE,+BACE,SAAC,EAAD,KAGL,C,sLCJK6B,E,OAAWC,EAAAA,OAAa,CAC5BC,QAHe,gCAIfC,OAAQ,CACNC,QANY,mCAOZC,SAAU,WAIRzB,EAAY,mCAAG,WAAMJ,GAAN,kGAEMwB,EAASvB,IAAI,eAAgB,CAClD0B,OAAQ,CACN3B,MAAOA,KAJM,uBAETK,EAFS,EAETA,KAFS,kBAOVA,GAPU,sCASjBE,QAAQuB,MAAM,0BAAd,MATiB,8DAAH,sDAcZC,EAAc,mCAAG,+GAEIP,EAASvB,IAAI,iBAFjB,uBAEXI,EAFW,EAEXA,KAFW,kBAGZA,GAHY,sCAKnBE,QAAQuB,MAAM,qCAAd,MALmB,8DAAH,qDAUdE,EAAY,mCAAG,WAAM9C,GAAN,kGAEMsC,EAASvB,IAAT,gBAAsBf,IAF5B,uBAETmB,EAFS,EAETA,KAFS,kBAGVA,GAHU,sCAKjBE,QAAQuB,MAAR,sCAA6C5C,EAA7C,WALiB,8DAAH,sDAUZ+C,EAAU,mCAAG,WAAM/C,GAAN,kGAEQsC,EAASvB,IAAT,gBAAsBf,EAAtB,aAFR,uBAEPmB,EAFO,EAEPA,KAFO,kBAGRA,GAHQ,sCAKfE,QAAQuB,MAAR,kDAAyD5C,EAAzD,WALe,8DAAH,sDAUVgD,EAAU,mCAAG,WAAMhD,GAAN,kGAEQsC,EAASvB,IAAT,gBAAsBf,EAAtB,aAFR,uBAEPmB,EAFO,EAEPA,KAFO,kBAGRA,GAHQ,sCAKfE,QAAQuB,MAAR,kDAAyD5C,EAAzD,WALe,8DAAH,qD","sources":["components/PopularMovieItem/PopularMovieItem.jsx","components/SearchMovies/SearchMovies.jsx","pages/Movies.jsx","services/api.js"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\nimport './PopularMovieItem.css';\nconst PopularMovieItem = ({ items }) => {\n  const location = useLocation();\n\n  const element = items.map(({ id, title }) => (\n    <Link\n      className=\"popular-movie-link\"\n      key={id}\n      to={`/movies/${id}`}\n      state={{ from: location }}\n    >\n      <li className=\"popular-movie-item\">{title}</li>\n    </Link>\n  ));\n\n  return <ul className=\"popular-movie-list\">{element}</ul>;\n};\n\nexport default PopularMovieItem;\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { searchMovies } from 'services/api';\nimport Loader from 'components/Loader/Loader';\nimport PopularMovie from 'components/PopularMovieItem/PopularMovieItem';\nimport './SearchMovies.css'; \n\nconst SearchMovies = () => {\n  const [loading, setLoading] = useState(false);\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query');\n\n  useEffect(() => {\n    const fetchMovie = async () => {\n      try {\n        setLoading(true);\n        const data = await searchMovies(query);\n        setMovies([...data.results]);\n      } catch (error) {\n        console.log(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (query === '') {\n      return;\n    }\n    fetchMovie();\n  }, [query]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    setSearchParams({ query: form.elements.searchname.value });\n  };\n\n  return (\n    <div className=\"search-movies\">\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          name=\"searchname\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movies\"\n          className=\"search-input\"\n        />\n        <button type=\"submit\" className=\"search-button\">\n          Search\n        </button>\n      </form>\n      {loading ? <Loader /> : <PopularMovie items={movies} />}\n    </div>\n  );\n};\n\nexport default SearchMovies;\n","import SearchMovies from \"components/SearchMovies/SearchMovies\";\n\n\nconst Movies = () => {\n  return (\n    <>\n      <SearchMovies />\n    </>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nconst API_KEY = 'c66f597fbdbbb50c0972dd6c4a492e0e';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nconst instance = axios.create({\n  baseURL: BASE_URL,\n  params: {\n    api_key: API_KEY,\n    language: 'en-US',\n  },\n});\n\nconst searchMovies = async query => {\n  try {\n    const { data } = await instance.get('search/movie', {\n      params: {\n        query: query,\n      },\n    });\n    return data;\n  } catch (error) {\n    console.error('Error searching movies:', error);\n    throw error;\n  }\n};\n\nconst getMostPopular = async () => {\n  try {\n    const { data } = await instance.get('movie/popular');\n    return data;\n  } catch (error) {\n    console.error('Error getting most popular movies:', error);\n    throw error;\n  }\n};\n\nconst getMovieById = async id => {\n  try {\n    const { data } = await instance.get(`movie/${id}`);\n    return data;\n  } catch (error) {\n    console.error(`Error getting movie with ID ${id}:`, error);\n    throw error;\n  }\n};\n\nconst getCredits = async id => {\n  try {\n    const { data } = await instance.get(`movie/${id}/credits`);\n    return data;\n  } catch (error) {\n    console.error(`Error getting credits for movie with ID ${id}:`, error);\n    throw error;\n  }\n};\n\nconst getReviews = async id => {\n  try {\n    const { data } = await instance.get(`movie/${id}/reviews`);\n    return data;\n  } catch (error) {\n    console.error(`Error getting reviews for movie with ID ${id}:`, error);\n    throw error;\n  }\n};\n\nexport { searchMovies, getMostPopular, getMovieById, getCredits, getReviews };\n"],"names":["items","location","useLocation","element","map","id","title","className","to","state","from","useState","loading","setLoading","movies","setMovies","useSearchParams","searchParams","setSearchParams","query","get","useEffect","fetchMovie","searchMovies","data","results","console","log","message","onSubmit","e","preventDefault","form","currentTarget","elements","searchname","value","type","name","autoComplete","autoFocus","placeholder","Loader","instance","axios","baseURL","params","api_key","language","error","getMostPopular","getMovieById","getCredits","getReviews"],"sourceRoot":""}