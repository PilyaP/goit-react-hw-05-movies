{"version":3,"file":"static/js/746.7a3245cd.chunk.js","mappings":"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","sources":["components/MovieDetails/MovieDetails.jsx","pages/SingleMovie.jsx","services/api.js"],"sourcesContent":["import Loader from 'components/Loader/Loader';\nimport { useState, useEffect, useCallback } from 'react';\nimport { useParams, useNavigate, useLocation } from 'react-router-dom';\nimport { NavLink, Outlet } from 'react-router-dom';\nimport { getMovieById } from 'services/api';\nimport './MovieDetails.css';\n\n\nconst MovieDetails = () => {\n  const [loading, setLoading] = useState(false);\n  const [movie, setMovie] = useState({});\n  const [genres, setGenres] = useState([]);\n\n  const { id } = useParams();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const from = location.state?.from || '/';\n\n  useEffect(() => {\n    const fetchMovieId = async () => {\n      try {\n        setLoading(true);\n        const data = await getMovieById(id);\n        setMovie(data);\n        setGenres(data.genres);\n      } catch (error) {\n        console.log(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchMovieId();\n  }, [id]);\n\n  const goBack = useCallback(() => {\n    navigate(from);\n  }, [navigate, from]);\n\n  return (\n    <div className=\"movie-details-container\">\n      <button className='btn-movie' onClick={goBack}>GO BACK</button>\n      {loading && <Loader />}\n      <div className=\"movie-details\">\n        {movie.poster_path && (\n          <img\n            src={`https://image.tmdb.org/t/p/w500/${movie.poster_path}`}\n            className=\"movie-poster\"\n            alt=\"\"\n          />\n        )}\n        <div className=\"movie-info\">\n          <h1 className=\"movie-title\">{movie.title}</h1>\n          <p className=\"user-score\">\n            User Score: {Math.round(movie.vote_average * 10)}%\n          </p>\n          <h2 className=\"overview-title\">Overview</h2>\n          <p className=\"overview-text\">{movie.overview}</p>\n          <h3 className=\"genres-title\">Genres</h3>\n          <ul className=\"genres-list\">\n            {genres.map(({ id, name }) => (\n              <li key={id} className=\"genre-item\">\n                {name}\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n      <div className=\"navigation-links\">\n        <NavLink className=\"nav-link\" to=\"cast\" state={{ from }}>\n          Cast\n        </NavLink>\n        <NavLink className=\"nav-link\" to=\"reviews\" state={{ from }}>\n          Reviews\n        </NavLink>\n      </div>\n      <Outlet />\n    </div>\n  );\n};\n\nexport default MovieDetails;\n","import MovieDetails from 'components/MovieDetails/MovieDetails';\n\n\nconst SingleMovie = () => {\n  return (\n    <>\n      <MovieDetails />\n    </>\n  );\n};\n\nexport default SingleMovie;\n","import axios from 'axios';\n\nconst API_KEY = 'c66f597fbdbbb50c0972dd6c4a492e0e';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nconst instance = axios.create({\n  baseURL: BASE_URL,\n  params: {\n    api_key: API_KEY,\n    language: 'en-US',\n  },\n});\n\nconst searchMovies = async query => {\n  try {\n    const { data } = await instance.get('search/movie', {\n      params: {\n        query: query,\n      },\n    });\n    return data;\n  } catch (error) {\n    console.error('Error searching movies:', error);\n    throw error;\n  }\n};\n\nconst getMostPopular = async () => {\n  try {\n    const { data } = await instance.get('movie/popular');\n    return data;\n  } catch (error) {\n    console.error('Error getting most popular movies:', error);\n    throw error;\n  }\n};\n\nconst getMovieById = async id => {\n  try {\n    const { data } = await instance.get(`movie/${id}`);\n    return data;\n  } catch (error) {\n    console.error(`Error getting movie with ID ${id}:`, error);\n    throw error;\n  }\n};\n\nconst getCredits = async id => {\n  try {\n    const { data } = await instance.get(`movie/${id}/credits`);\n    return data;\n  } catch (error) {\n    console.error(`Error getting credits for movie with ID ${id}:`, error);\n    throw error;\n  }\n};\n\nconst getReviews = async id => {\n  try {\n    const { data } = await instance.get(`movie/${id}/reviews`);\n    return data;\n  } catch (error) {\n    console.error(`Error getting reviews for movie with ID ${id}:`, error);\n    throw error;\n  }\n};\n\nexport { searchMovies, getMostPopular, getMovieById, getCredits, getReviews };\n"],"names":["useState","loading","setLoading","movie","setMovie","genres","setGenres","id","useParams","navigate","useNavigate","from","useLocation","state","useEffect","fetchMovieId","getMovieById","data","console","log","message","goBack","useCallback","className","onClick","Loader","poster_path","src","alt","title","Math","round","vote_average","overview","map","name","to","instance","axios","baseURL","params","api_key","language","searchMovies","query","get","error","getMostPopular","getCredits","getReviews"],"sourceRoot":""}