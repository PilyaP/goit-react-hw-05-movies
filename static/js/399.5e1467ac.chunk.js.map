{"version":3,"file":"static/js/399.5e1467ac.chunk.js","mappings":"wQA6CA,EAvCuB,WACrB,OAA8BA,EAAAA,EAAAA,WAAS,GAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA8BF,EAAAA,EAAAA,UAAS,IAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KAEQC,GAAOC,EAAAA,EAAAA,MAAPD,IAERE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,oGAEjBN,GAAW,GAFM,UAGEO,EAAAA,EAAAA,IAAWJ,GAHb,OAGXK,EAHW,OAIjBN,EAAWM,EAAKC,SAJC,gDAMjBC,QAAQC,IAAI,KAAMC,SAND,yBAQjBZ,GAAW,GARM,4EAAH,qDAYlBM,GACD,GAAE,CAACH,IAEJ,IAAMU,EAAcZ,EAAQa,KAAI,gBAAGX,EAAH,EAAGA,GAAIY,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OAC9B,gBAAaC,UAAU,cAAvB,WACE,eAAIA,UAAU,gBAAd,SAA+BF,KAC/B,cAAGE,UAAU,iBAAb,SAA+BD,MAFxBb,EADqB,IAOhC,OACE,gCACGJ,IAAW,SAACmB,EAAA,EAAD,KACZ,eAAID,UAAU,cAAd,SACsB,IAAnBhB,EAAQkB,OAAe,uBAAyBN,MAIxD,ECjCD,EARgB,WACd,OACE,+BACE,SAAC,EAAD,KAGL,C,sLCHKO,E,OAAWC,EAAAA,OAAa,CAC5BC,QAHe,gCAIfC,OAAQ,CACNC,QANY,mCAOZC,SAAU,WAIRC,EAAY,mCAAG,WAAMC,GAAN,kGAEMP,EAASQ,IAAI,eAAgB,CAClDL,OAAQ,CACNI,MAAOA,KAJM,uBAETnB,EAFS,EAETA,KAFS,kBAOVA,GAPU,sCASjBE,QAAQmB,MAAM,0BAAd,MATiB,8DAAH,sDAcZC,EAAc,mCAAG,+GAEIV,EAASQ,IAAI,iBAFjB,uBAEXpB,EAFW,EAEXA,KAFW,kBAGZA,GAHY,sCAKnBE,QAAQmB,MAAM,qCAAd,MALmB,8DAAH,qDAUdE,EAAY,mCAAG,WAAM5B,GAAN,kGAEMiB,EAASQ,IAAT,gBAAsBzB,IAF5B,uBAETK,EAFS,EAETA,KAFS,kBAGVA,GAHU,sCAKjBE,QAAQmB,MAAR,sCAA6C1B,EAA7C,WALiB,8DAAH,sDAUZ6B,EAAU,mCAAG,WAAM7B,GAAN,kGAEQiB,EAASQ,IAAT,gBAAsBzB,EAAtB,aAFR,uBAEPK,EAFO,EAEPA,KAFO,kBAGRA,GAHQ,sCAKfE,QAAQmB,MAAR,kDAAyD1B,EAAzD,WALe,8DAAH,sDAUVI,EAAU,mCAAG,WAAMJ,GAAN,kGAEQiB,EAASQ,IAAT,gBAAsBzB,EAAtB,aAFR,uBAEPK,EAFO,EAEPA,KAFO,kBAGRA,GAHQ,sCAKfE,QAAQmB,MAAR,kDAAyD1B,EAAzD,WALe,8DAAH,qD","sources":["components/ReviewDetails/ReviewDetails.jsx","pages/Reviews.jsx","services/api.js"],"sourcesContent":["import Loader from 'components/Loader/Loader';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getReviews } from 'services/api';\nimport './ReviewDetails';\n\nconst ReviewsDetails = () => {\n  const [loading, setLoading] = useState(false);\n  const [reviews, setReviews] = useState([]);\n\n  const { id } = useParams();\n\n  useEffect(() => {\n    const fetchReviews = async () => {\n      try {\n        setLoading(true);\n        const data = await getReviews(id);\n        setReviews(data.results);\n      } catch (error) {\n        console.log(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchReviews();\n  }, [id]);\n\n  const reviewItems = reviews.map(({ id, author, content }) => (\n    <li key={id} className=\"review-item\">\n      <h3 className=\"review-author\">{author}</h3>\n      <p className=\"review-content\">{content}</p>\n    </li>\n  ));\n\n  return (\n    <>\n      {loading && <Loader />}\n      <ul className=\"review-list\">\n        {reviews.length === 0 ? 'No reviews available' : reviewItems}\n      </ul>\n    </>\n  );\n};\n\nexport default ReviewsDetails;\n","import ReviewsDetails from 'components/ReviewDetails/ReviewDetails';\n\nconst Reviews = () => {\n  return (\n    <>\n      <ReviewsDetails />\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst API_KEY = 'c66f597fbdbbb50c0972dd6c4a492e0e';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nconst instance = axios.create({\n  baseURL: BASE_URL,\n  params: {\n    api_key: API_KEY,\n    language: 'en-US',\n  },\n});\n\nconst searchMovies = async query => {\n  try {\n    const { data } = await instance.get('search/movie', {\n      params: {\n        query: query,\n      },\n    });\n    return data;\n  } catch (error) {\n    console.error('Error searching movies:', error);\n    throw error;\n  }\n};\n\nconst getMostPopular = async () => {\n  try {\n    const { data } = await instance.get('movie/popular');\n    return data;\n  } catch (error) {\n    console.error('Error getting most popular movies:', error);\n    throw error;\n  }\n};\n\nconst getMovieById = async id => {\n  try {\n    const { data } = await instance.get(`movie/${id}`);\n    return data;\n  } catch (error) {\n    console.error(`Error getting movie with ID ${id}:`, error);\n    throw error;\n  }\n};\n\nconst getCredits = async id => {\n  try {\n    const { data } = await instance.get(`movie/${id}/credits`);\n    return data;\n  } catch (error) {\n    console.error(`Error getting credits for movie with ID ${id}:`, error);\n    throw error;\n  }\n};\n\nconst getReviews = async id => {\n  try {\n    const { data } = await instance.get(`movie/${id}/reviews`);\n    return data;\n  } catch (error) {\n    console.error(`Error getting reviews for movie with ID ${id}:`, error);\n    throw error;\n  }\n};\n\nexport { searchMovies, getMostPopular, getMovieById, getCredits, getReviews };\n"],"names":["useState","loading","setLoading","reviews","setReviews","id","useParams","useEffect","fetchReviews","getReviews","data","results","console","log","message","reviewItems","map","author","content","className","Loader","length","instance","axios","baseURL","params","api_key","language","searchMovies","query","get","error","getMostPopular","getMovieById","getCredits"],"sourceRoot":""}